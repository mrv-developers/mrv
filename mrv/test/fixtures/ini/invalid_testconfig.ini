[header]
akey = 1
bkey = value
#this is a list
alist = 1,2,3,4,5,6,7,8,9,10
# ',' have no meaning within quotes 
blist = "another , one","this is valid", 3
#error - ':' not allowed in key names
c:key = value
dkey = val:ue
#error - ',' only allowed in value names
ek,ey = value 
#error - multiple = not allowed
fk=ey = value

[ header ]
# error - headers will be stripped, multiple headers with same name not allowed
# ignore second occourrence
akey = 3

[ this:hea,der ]
# error - ':,' not allowed in headers

[another header]
akey = 2
bkey = 5
anotherkey = value

# url keys indicate the position of special data and the protocol handler to decode it
# if they value is retrieved without a special function, it will be simply threated 
# as string value
urlkey = protocol:path

# property headers attach additional values to each key
[ +akey ]
# this key property is not unique and will cause a read error, it will be ignored
property = errorthrown

# ok - the key is fully qualified
[ +header:akey ]
# set the given simple boolean flags true
flags = flag1,flag2
# set the flag false again
unflag = flag1,flag2
#flags are set such that nothing special will be done if the flag is not set 
# or false ( which equals the 'not set' state

# flags can be set individually too
flag1 = 1
flag2 = True

# options can alslo be specified for a complete header to apply to all keys below 
[ +another header ]
flag1 = True

# key properties will always be applied after the header properties - thus they 
# overwrite them
[ +anotherkey ]
flag1 = False

[ invalidkeys and values ]
newlines not allowed in 
keys = value
key = value with 
newlines 
key = "multiline value
end here - invalid too"

[ newlines 
not allowed in 
headers ]
key = value

